// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  preferredName String @default("")
  googleId String?
  uId String?
  password String?
  igHandle String? 
  profiles Profile[]
  verified Boolean @default(false)
  created DateTime? @default(now())
}
model Profile{
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    profilePic String?
    username String? @unique
    profileToCollections ProfileToCollection[]
    selfStatement String @default("")
    userId String? @db.ObjectId
    writerLevel Int? @default(1)
    hashtag HashtagComment[]
    user User? @relation(fields: [userId], references: [id])
    isPrivate Boolean?
    requests AccessRequest[]
    hashtags HashtagStory[]
    stories Story[]
    likedStories UserStoryLike[]
    historyStories UserStoryHistory[]
    storyToCollections StoryToCollection[]
    collectionToCollections CollectionToCollection[]
    collections Collection[] 
    rolesToStory RoleToStory[]
    collectionHistory UserCollectionHistory[]
    rolesToCollection RoleToCollection[]
    comments Comment[] 

    created DateTime? @default(now())
}
model HashtagStory{
 id        String  @id @default(auto()) @map("_id") @db.ObjectId
 hashtagId String @db.ObjectId
 hashtag Hashtag  @relation(fields: [hashtagId], references: [id])
 storyId String @db.ObjectId
 profileId String @db.ObjectId
 profile Profile @relation(fields: [profileId], references: [id])
 story Story @relation(fields: [storyId], references: [id])
 created DateTime? @default(now())
}
model Hashtag {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  comments HashtagComment[]
  stories   HashtagStory[]  
}
model UserCollectionHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  collection Collection? @relation( fields: [collectionId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  collectionId String? @db.ObjectId
  profileId String @db.ObjectId
  profile Profile?@relation( fields: [profileId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  created DateTime? @default(now())
}
model ProfileToCollection{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  collection Collection? @relation( fields: [collectionId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  collectionId String? @db.ObjectId
  profileId String @db.ObjectId
  profile Profile?@relation( fields: [profileId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  created DateTime? @default(now())
}
model AccessRequest {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    role Role
    profileId String @db.ObjectId
    profile Profile @relation( fields: [profileId], references: [id],onDelete:NoAction,onUpdate:NoAction)
    objId String
    objType Content
    created DateTime? @default(now())
}
model StoryToCollection {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storyId String? @db.ObjectId
  story Story? @relation(fields: [storyId], references: [id])
  index Int?
  collection Collection @relation(fields: [collectionId], references: [id])
  collectionId String @db.ObjectId
  profileId String? @db.ObjectId
  profile Profile? @relation( fields: [profileId], references: [id],onDelete:NoAction,onUpdate:NoAction)
    
  created DateTime? @default(now())
}
model RoleToCollection{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  profileId String  @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id])
  collecitonId String @db.ObjectId
  collection Collection @relation(fields: [collecitonId], references: [id])
  role Role @default(reader)
  updated DateTime? @default(now())
  created DateTime? @default(now())
}
model RoleToStory{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  profileId String  @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id])
  storyId String @db.ObjectId
  story Story @relation(fields: [storyId], references: [id])
  role Role @default(reader)
  updated DateTime? @default(now())
  created DateTime? @default(now())
}

enum Role {
  reader
  editor
  commenter
  writer
}
enum Content{
  profile
  collection
  story
}
model Comment {
     id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  profileId String? @db.ObjectId
  profile Profile? @relation(fields: [profileId], references: [id])
  storyId String    @db.ObjectId
  story      Story      @relation(fields: [storyId], references: [id])
  parentId String?  @db.ObjectId
  parent Comment? @relation(name: "ChildToParent", fields: [parentId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  hashtags HashtagComment[]
  updated DateTime? @default(now())
  created DateTime? @default(now())
  children Comment[] @relation(name: "ChildToParent")
}
model Referral{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  email String 
  referralToken String
  isUsed Boolean
  createdAt DateTime @default(now())
}

 


model Collection{
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    title String @default("Untitled")
    purpose String @default("")
    isPrivate Boolean? @default(true)
    profileId String? @db.ObjectId
    profile Profile? @relation(fields: [profileId], references: [id])
    childCollections CollectionToCollection[] @relation(name: "ChildToParent")
    parentCollections CollectionToCollection[] @relation(name: "ParentToChild")
    storyIdList StoryToCollection[]
    favedBy ProfileToCollection[]
    roles RoleToCollection[]
    followersAre Role? @default(commenter)
    isOpenCollaboration Boolean @default(false)
    updated DateTime? @default(now())
    created DateTime? @default(now())

    userHistory UserCollectionHistory[]
}
model HashtagComment{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    hashtagId String @db.ObjectId
    hashtag Hashtag @relation(fields: [hashtagId], references: [id])
    commentId String @db.ObjectId
    comment Comment @relation(fields: [commentId], references: [id])
    profileId String @db.ObjectId
    profile Profile @relation(fields: [profileId], references: [id])
  created DateTime? @default(now())
}
model CollectionToCollection {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  index Int?
  parentCollection Collection @relation(name: "ChildToParent", fields: [parentCollectionId], references: [id])
  parentCollectionId String @db.ObjectId
  childCollectionId  String  @db.ObjectId
  childCollection Collection @relation(name: "ParentToChild",fields: [childCollectionId], references: [id])
  profileId String? @db.ObjectId
  profile Profile? @relation(fields: [profileId], references: [id])
  created DateTime? @default(now())
}
model UserStoryLike {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    storyId String @db.ObjectId
   story Story @relation(fields: [storyId], references: [id],onDelete:Cascade,onUpdate:Cascade)
   profile Profile @relation(fields: [profileId], references: [id],onDelete:Cascade,onUpdate:Cascade)
   profileId String @db.ObjectId
   created DateTime? @default(now())
}
model UserStoryHistory{
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    storyId String @db.ObjectId
    story Story @relation(fields: [storyId], references: [id],onDelete:Cascade,onUpdate:Cascade)
    profile Profile @relation(fields: [profileId], references: [id],onDelete:Cascade,onUpdate:Cascade)
    profileId String @db.ObjectId
    created DateTime? @default(now())
}

model Story{
   id    String @id @default(auto()) @map("_id") @db.ObjectId
   title String
   data String @default("")
   approvalScore Int @default(0)
   isPrivate Boolean @default(true)
   authorId String @db.ObjectId
 
   author Profile @relation(fields: [authorId], references: [id],onDelete:Cascade,onUpdate:Cascade)
   commentable Boolean
    storyLikes UserStoryLike[]
    storyHistory UserStoryHistory[]
   betaReaders RoleToStory[]
   comments Comment[]
   hashtags HashtagStory[]
   type StoryType @default(html)
   collections StoryToCollection[]
   updated DateTime? @default(now())
   created DateTime? @default(now())

   
}
enum StoryType {
  html
  image
  video
  link
}
